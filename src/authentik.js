'use strict';

const mongoose = require('mongoose');
const authRoutes = require('./routes/auth_routes');
const userRoutes = require('./routes/user_routes');
const resourceRoutes = require('./routes/resource_routes');
const { setRedisClient } = require('./middleware/cache_middleware');

// Define main Authentik module (returns an Express middleware function).
// TODO: Parse all parameters and throw errors where data is missing or incorrect.
//
// @param {String} database - Database uri including authentication credentials.
//   Currently only supports Mongo.
// @param {String} [cache] - Stores a whitelist of issued tokens. Tokens not on
//   this list are considered invalid. If no store is specified, a default
//   memory store is used. Recommend using Redis.
// @param {Object} [api] - Settings to control the named routes and database
//   table names generated by Authentik.
// @param {String} [api.tokens.dbName] - Database name used for table.
// @param {String} [api.tokens.path] - API endpoint used for generating route.
// @param {String} [api.users.dbName] - Database name used for table.
// @param {String} [api.users.path] - API endpoint used for generating route.
// @param {String} [api.resources.dbName] - Database name used for table.
// @param {String} [api.resources.path] - API endpoint used for generating route.
// @param {Object} tokens - JSON Web Token settings.
// @param {String} [tokens.issuer] - Set `iss` property of JWT. Defaults to 'authentik'.
// @param {String} [tokens.subject] - Set `sub` property of JWT. Ommited if blank.
// @param {String} [tokens.audience] - Set `aud` property of JWT. Ommited if blank.
// @param {Object} tokens.access - Settings for access tokens.
// @param {String} tokens.access.secret - Secret string used for token signature
//   for use for algorithms like HMAC. Ignored if using a public-key algorithm
//   like Elliptic Curve or RSA.
// @param {String} tokens.access.privateKey - Private key value used for
//   generating new token signatures using EC or RSA type algorithms. Ignored if
//   using secret-string algorithm like HMAC.
// @param {String} tokens.access.publicKey - Public key value used for verifying
//   token signature generated from EC or RSA algorithm using privateKey.
// @param {String} tokens.access.expiresIn - Token lifespan in words (see
//   [rauchg/ms](https://github.com/rauchg/ms.js).
// @param {String} tokens.access.algorithm - Algorithm identifier (see
//   [node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) for list of
//   available algorithms.
// @param {Object} tokens.refresh - Settings for refresh tokens.
// @param {String} tokens.refresh.secret - Secret string used for token signature
//   for use for algorithms like HMAC. Ignored if using a public-key algorithm
//   like Elliptic Curve or RSA.
// @param {String} tokens.refresh.privateKey - Private key value used for
//   generating new token signatures using EC or RSA type algorithms. Ignored if
//   using secret-string algorithm like HMAC.
// @param {String} tokens.refresh.publicKey - Public key value used for verifying
//   token signature generated from EC or RSA algorithm using privateKey.
// @param {String} tokens.refresh.expiresIn - Token lifespan in words (see
//   [rauchg/ms](https://github.com/rauchg/ms.js).
// @param {String} tokens.refresh.algorithm - Algorithm identifier (see
//   [node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) for list of
//   available algorithms.
// @returns {function} authentik - Attach Authentik routes and handlers to app.
// {
//   database: '',
//   cache: '',
//   api: {
//     tokens: {
//       dbName: 'tokens',
//       path: '/tokens'
//     },
//     users: {
//       dbName: 'users',
//       path: '/users'
//     },
//     resources: {
//       dbName: 'resources',
//       path: '/resources'
//     }
//   },
//   tokens: {
//     issuer: 'authentik',
//     subject: '',
//     audience: '',
//     access: {
//       privateKey: '',
//       publicKey: '',
//       secret: '',
//       expiresIn: '24 hours',
//       algorithm: 'HS256'
//     },
//     refresh: {
//       privateKey: '',
//       publicKey: '',
//       secret: '',
//       expiresIn: '7 days',
//       algorithm: 'HS256'
//     }
//   }
// }
const authentik = app => ({
  database,
  cache,
  api,
  tokens
} = {}) => {
  const db = mongoose.connect(database);
  db.connection.on('connected', () => console.log('Authentik connected to Mongo.'));
  db.connection.on('error', err => console.log('Authentik database Error: ', err));
  db.connection.on('disconnected', () => console.log('Authentik disconnected from Mongo.'));

  app.use([
    function attachSettingsToReq (req, res, next) {
      req.authentik = { tokens, api };
      next();
    },
    setRedisClient(cache),
    authRoutes(api.tokens.path),
    userRoutes(api.users.path),
    resourceRoutes(api.resources.path)
  ]);
};

module.exports = authentik;
